using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PickUpParent : MonoBehaviour {

    //public GameObject guiObject;
    public Light myLight;
    SteamVR_TrackedObject trackedObj;
    SteamVR_Controller.Device device;


    public Transform sphere;


    // Use this for initialization
    void Awake()
    {
        trackedObj = GetComponent<SteamVR_TrackedObject>();
    }

    void FixedUpdate()
    {
        /////////////////////////////   Touch   ////////////////////////////////////////////
        device = SteamVR_Controller.Input((int)trackedObj.index);

        myLight.enabled = false;


        //if (device.GetPressUp(SteamVR_Controller.ButtonMask.Touchpad))
        //{
        //    // when you press the touch
        //    sphere.transform.position = Vector3.zero;
        //    sphere.GetComponent<Rigidbody>().velocity = Vector3.zero;
        //    sphere.GetComponent<Rigidbody>().angularVelocity = Vector3.zero;
        //}

    }

    void OnTriggerStay(Collider col)
    {
        Debug.Log("You have collided with " + col.name + "and activated OnTriggerStay");
        myLight.enabled = true;
        //guiObject.SetActive(true);



        if (device.GetTouch(SteamVR_Controller.ButtonMask.Trigger))
        {
            Debug.Log("You have collided with " + col.name + " while holding down touch.");
            col.attachedRigidbody.isKinematic = true;
            col.gameObject.transform.SetParent(gameObject.transform);

        }
        if (device.GetTouchUp(SteamVR_Controller.ButtonMask.Trigger))
        {
            Debug.Log("You have released Touch with colliding with " + col.name);
            col.gameObject.transform.SetParent(null);
            col.attachedRigidbody.isKinematic = false;
            tossObject(col.attachedRigidbody);

        }
    }

    void tossObject(Rigidbody rigidBody)
    {
        Transform origin = trackedObj.origin ? trackedObj.origin : trackedObj.transform.parent;
        if (origin != null)
        {
            rigidBody.velocity = origin.TransformVector(device.velocity);
            rigidBody.angularVelocity = origin.TransformVector(device.angularVelocity);
        }
        else
        {
            rigidBody.velocity = device.velocity;
            rigidBody.angularVelocity = device.angularVelocity;
        }

    }






}
